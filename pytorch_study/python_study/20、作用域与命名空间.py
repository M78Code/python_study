# 作用域（scope）
# 作用域指的是变量生效的区域
# 在Python中一共有两种作用域
#   全局作用域
#       全局作用域在程序执行时创建，在程序执行结束时销毁
#       所有函数以外的区域都全局作用域
#
#   函数作用域
#       函数作用域在函数调用时创建，在调用结束时销毁
#       函数每调用一次就会产生一个新的函数作用域
#       在函数作用域中定义的变量，都局部变量，它只能在函数内部被访问
#   变量的查找
#       当我们使用变量时，会优先在当前作用域中寻找该变量，如果有则使用，
#       如果依然没有则继续去上一级作用域中寻找，以此类推
#       直到找到全局作用域，依然没有找到，

a = 10


def fn2():
    a = 30

    def fn3():
        print('fn3中:', 'a = ', a)

    fn3()


fn2()

print("a = ", a)


def fn3():
    # a = 10 在函数中为变量赋值时，默认都是为局部变量赋值
    # 如果希望在函数内部修改全局变量，则需要使用global关键字，来声明变量
    global a
    a = 10  # 修改全局变量
    pass


#  命名空间（namespace）
# 命名空间指的是变量存储的位置，每一个变量都需要存储到指定的命名空间当中
# 每一个作用域都会有一个它对应的命名空间
# 全局命名空间，用来保存全局变量，函数命名空间用来保存函数中的变量
# 命名空间实际上就是一个字典，是一个专门用来存储变量的字典

# locals() 用来获取当前作用域的命名空间
# 如果在全局作用域中调用locals()则获取全局命名空间，如果在函数作用域中调用locals()则
#   获取函数命名空间，返回的是一个字典
scope = locals()
print(type(scope))

print(a)
print(scope['a'])
scope['cc'] = 'Leon'  # 向字典中添加key-value就相当于在全局中创建了一个变量（一般不建议这么做）


# print(cc)   # 虽然报红，但能打印出值


def fn5():
    a = 10
    scope = locals()  # 在函数内部调用locals()会获取到函数命名空间
    scope['b'] = 20
    print(scope)

    # globals() 函数可以用来在任意位置获取全局命名空间
    global_scope = globals()
    print(global_scope['a'])


fn5()
